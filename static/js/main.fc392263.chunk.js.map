{"version":3,"sources":["components/Tasks/Tasks.js","components/SelectQuizType/SelectQuizType.js","App.js","reportWebVitals.js","index.js"],"names":["Tasks","props","changeQuestionForWrong","setState","currentTask","state","changeQuestionForCorrect","totalScores","restartQuiz","shuffleFourAnswer","QAarray","num","Math","floor","random","className","onClick","correct_answer","incorrect_answers","shuffleTwoAnswer","this","length","question","getQuiz","React","Component","SelectQuizType","handleChange","event","target","name","value","fetch","trivia_category","trivia_difficulty","then","response","json","data","results","triger","onChange","categories","map","genre","index","id","App","push","trivia_categories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fc392263.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Tasks.css'\r\nimport SelectQuizType from '../SelectQuizType/SelectQuizType'\r\n\r\nclass Tasks extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\t\tthis.state = {\r\n\t\t\tQAarray: props.QAarray,\r\n\t\t\tcurrentTask: 0,\r\n\t\t\ttotalScores: 0\r\n\t\t}\r\n\t}\r\n\r\n\tchangeQuestionForWrong = () => {\r\n\t\tthis.setState({\r\n\t\t\tcurrentTask: this.state.currentTask + 1\r\n\t\t})\r\n\t}\r\n\r\n\tchangeQuestionForCorrect = () => {\r\n\t\tthis.setState({\r\n\t\t\tcurrentTask: this.state.currentTask + 1,\r\n\t\t\ttotalScores: this.state.totalScores + 5\r\n\t\t})\r\n\t}\r\n\r\n\trestartQuiz = () => {\r\n\t\tthis.setState({currentTask: 0, totalScores: 0})\r\n\t}\r\n\r\n\tshuffleFourAnswer = () => {\r\n\t\tconst { QAarray, currentTask } = this.state\r\n\t\tlet num = Math.floor(Math.random() * 4)\r\n\t\tif (num == 0 ) {\r\n\t\t\treturn (\r\n\t\t\t\t<div className='answers'>\r\n\t\t\t\t\t<button onClick={this.changeQuestionForCorrect} className='answer' >{QAarray[currentTask].correct_answer}</button>\r\n\t\t\t\t\t<button onClick={this.changeQuestionForWrong} className='answer' >{QAarray[currentTask].incorrect_answers[0]}</button>\r\n\t\t\t\t\t<button onClick={this.changeQuestionForWrong} className='answer' >{QAarray[currentTask].incorrect_answers[1]}</button>\r\n\t\t\t\t\t<button onClick={this.changeQuestionForWrong} className='answer' >{QAarray[currentTask].incorrect_answers[2]}</button>\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n\t\t} else if(num == 1) {\r\n\t\t\treturn (\r\n\t\t\t\t<div className='answers'>\r\n\t\t\t\t\t<button onClick={this.changeQuestionForWrong} className='answer' >{QAarray[currentTask].incorrect_answers[0]}</button>\r\n\t\t\t\t\t<button onClick={this.changeQuestionForCorrect} className='answer' >{QAarray[currentTask].correct_answer}</button>\r\n\t\t\t\t\t<button onClick={this.changeQuestionForWrong} className='answer' >{QAarray[currentTask].incorrect_answers[1]}</button>\r\n\t\t\t\t\t<button onClick={this.changeQuestionForWrong} className='answer' >{QAarray[currentTask].incorrect_answers[2]}</button>\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n\t\t} else if(num == 2) {\r\n\t\t\treturn (\r\n\t\t\t\t<div className='answers'>\r\n\t\t\t\t\t<button onClick={this.changeQuestionForWrong} className='answer' >{QAarray[currentTask].incorrect_answers[0]}</button>\r\n\t\t\t\t\t<button onClick={this.changeQuestionForWrong} className='answer' >{QAarray[currentTask].incorrect_answers[1]}</button>\r\n\t\t\t\t\t<button onClick={this.changeQuestionForCorrect} className='answer' >{QAarray[currentTask].correct_answer}</button>\r\n\t\t\t\t\t<button onClick={this.changeQuestionForWrong} className='answer' >{QAarray[currentTask].incorrect_answers[2]}</button>\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n\t\t} else if(num == 3) {\r\n\t\t\treturn (\r\n\t\t\t\t<div className='answers'>\r\n\t\t\t\t\t<button onClick={this.changeQuestionForWrong}  className='answer' >{QAarray[currentTask].incorrect_answers[0]}</button>\r\n\t\t\t\t\t<button onClick={this.changeQuestionForWrong} className='answer' >{QAarray[currentTask].incorrect_answers[1]}</button>\r\n\t\t\t\t\t<button onClick={this.changeQuestionForWrong} className='answer' >{QAarray[currentTask].incorrect_answers[2]}</button>\r\n\t\t\t\t\t<button onClick={this.changeQuestionForCorrect} className='answer' >{QAarray[currentTask].correct_answer}</button>\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n\t\t\t\r\n\t\t} else {\r\n\t\t\treturn (\r\n\t\t\t\t<div><h1>function \"shuffleFourAnswer\" error ಥ_ಥ</h1></div>\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n\r\n\tshuffleTwoAnswer = () => {\r\n\t\tconst { QAarray, currentTask } = this.state\r\n\t\tlet num = Math.floor(Math.random() * 2)\r\n\t\tif(num == 0) {\r\n\t\t\treturn (\r\n\t\t\t\t<div className='answers tc'>\r\n\t\t\t\t\t<button onClick={this.changeQuestionForCorrect} className='answer' >{QAarray[currentTask].correct_answer}</button>\r\n\t\t\t\t\t<button onClick={this.changeQuestionForWrong} className='answer' >{QAarray[currentTask].incorrect_answers[0]}</button>\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n\t\t} else if(num == 1) {\r\n\t\t\treturn (\r\n\t\t\t\t<div className='answers tc'>\r\n\t\t\t\t\t<button onClick={this.changeQuestionForWrong} className='answer' >{QAarray[currentTask].incorrect_answers[0]}</button>\r\n\t\t\t\t\t<button onClick={this.changeQuestionForCorrect} className='answer' >{QAarray[currentTask].correct_answer}</button>\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n\t\t} else {\r\n\t\t\treturn (\r\n\t\t\t\t<div><h1>function \"shuffleTwoAnswer\" error ಥ_ಥ</h1></div>\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\t// destructure states\r\n\t\tconst { QAarray, currentTask, totalScores } = this.state\r\n\t\treturn (\r\n\t\t<div className='tc'>\r\n\t\t\t{\r\n\t\t\t\tcurrentTask < this.props.QAarray.length\r\n\t\t\t\t? \r\n\t\t\t\t<div className='questionAndAnswers ma2 tc'>\r\n\t\t\t\t\t<div className='question'><h4 className='tc'>{QAarray[currentTask].question}</h4></div>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tQAarray[currentTask].incorrect_answers.length == 1 \r\n\t\t\t\t\t\t?\r\n\t\t\t\t\t\tthis.shuffleTwoAnswer()\r\n\t\t\t\t\t\t:\r\n\t\t\t\t\t\tthis.shuffleFourAnswer()\r\n\t\t\t\t\t}\r\n\t\t\t\t\t<p>help from creator \"Think Before You Click\" ^-^</p>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t: \r\n\t\t\t\t<div className='tc'>\r\n\t\t\t\t\t<h1>Your Total Scores Are...</h1>\r\n\t\t\t\t\t<h1 className='tc'>{`${totalScores}`}</h1>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttotalScores <= 0 ? <h4>Are you kidding me???</h4> : totalScores <= 40 ? <h4>that's okey</h4> : <h4>Wow I Levani kistauri, will declare you as the champion</h4>\r\n\t\t\t\t\t}\r\n\t\t\t\t\t<button onClick={this.props.getQuiz} className='button'>new quiz</button>\r\n\t\t\t\t\t<button onClick={this.restartQuiz} className='button'>reset quiz</button>\r\n\t\t\t\t</div>\r\n\t\t\t}\r\n\t\t</div>\r\n\t\t\t\r\n\t\t)\r\n\t}\r\n} \r\n\r\n\r\nexport default Tasks","import React from 'react'\r\nimport './SelectQuizType.css'\r\nimport Tasks from '../Tasks/Tasks'\r\n\r\nclass SelectQuizType extends React.Component{\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\t\tthis.state = {\r\n\t\t\ttrivia_category: '',\r\n\t\t\ttrivia_difficulty: '',\r\n\t\t\tQAarray: [],\r\n\t\t\ttriger: false\r\n\t\t}\r\n\t}\r\n\r\n\t// save data of inputs in this.state\r\n\thandleChange = (event) => {\r\n        const {name, value} = event.target\r\n        this.setState({\r\n            [name]: value,\r\n        })\r\n    }\r\n\r\n    // fetch quiz with \r\n    getQuiz = () => {\r\n    \tfetch(`https://opentdb.com/api.php?amount=10&category=${this.state.trivia_category}&difficulty=${this.state.trivia_difficulty}`)\r\n    \t.then(response => response.json())\r\n    \t.then(data => {\r\n    \t\tthis.setState({\r\n    \t\t\tQAarray: data.results,\r\n            \ttriger: !this.state.triger,\r\n            \ttrivia_category: '',\r\n            \ttrivia_difficulty: ''\r\n        \t})\r\n    \t})\r\n    \t\r\n    }\r\n\t\r\n\trender() {\r\n\t\treturn(\r\n\t\t\tthis.state.triger \r\n\t\t\t? \r\n\t\t\t<Tasks QAarray={this.state.QAarray} getQuiz={this.getQuiz} /> \r\n\t\t\t:\r\n\t\t\t<div>\r\n\t\t\t\t<div className='tc'>\r\n\t\t\t\t\t<h1 className='tc'>please select category and difficulty</h1>\r\n\t\t\t\t\t<h3>\"A winner is a dreamer who never gives up\"</h3>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='allButtons tc'>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.state.trivia_difficulty != '' && this.state.trivia_category != '' \r\n\t\t\t\t\t\t?\r\n\t\t\t\t\t\t\t<button className=\"button\" onClick={this.getQuiz}>Start</button>\r\n\t\t\t\t\t\t: \r\n\t\t\t\t\t\tthis.state.trivia_difficulty != ''\r\n\t\t\t\t\t\t?\r\n\t\t\t\t\t\t\t<select value={this.state.trivia_category} name=\"trivia_category\" className=\"button\" onChange={this.handleChange}>\r\n\t\t\t\t\t\t\t\t<option value=\"any\">Select Category</option>\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tthis.props.categories[0].map((genre, index) => {\r\n\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t<option key={index} value={genre.id}>{genre.name}</option>\r\n\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t<select value={this.state.trivia_difficulty} name=\"trivia_difficulty\" className=\"button\" onChange={this.handleChange}>\r\n\t\t\t\t\t\t\t\t<option value=\"any\">Select Difficulty</option>\r\n\t\t\t\t\t\t\t\t<option value=\"easy\">Easy</option>\r\n\t\t\t\t\t\t\t\t<option value=\"medium\">Medium</option>\r\n\t\t\t\t\t\t\t\t<option value=\"hard\">Hard</option>\r\n\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t\t<p className='tc ma2'>here is our rules If your answer turns out to be correct you will get 5 points</p>\r\n\t\t\t</div>\r\n\t\t\t\r\n\t\t)\r\n\t}\r\n}\r\n\r\n\r\nexport default SelectQuizType","import React from 'react'\nimport SelectQuizType from './components/SelectQuizType/SelectQuizType'\n\n\n\nclass App extends React.Component{\n  constructor() {\n    super()\n    this.state = {\n      categories: []\n    }\n  }\n\n\n  componentDidMount(){\n    fetch('https://opentdb.com/api_category.php')\n    .then(response => response.json())\n    .then(data => {\n      this.state.categories.push(data.trivia_categories)\n    })\n  }\n  \n  render() {\n    return(\n      <div>\n        <SelectQuizType categories={this.state.categories}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}